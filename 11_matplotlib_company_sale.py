# -*- coding: utf-8 -*-
"""11_matplotlib/company-sale.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rFrxeDbFkny-v910sQoFhu3I1vUtmkns
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# Step 1. Import the necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter

# set this so the graphs open internally
# %matplotlib inline

# Step 2. Import the dataset from this address.
# read the Excel file into a DataFrame
df = pd.read_csv('/content/company_sales_data.csv')

# print the first 5 rows of the DataFrame
print(df.head())
print(df)

# Exercise 1: Read Total profit of all months and show it using a line plot
# group the data by month and sum the total profit for each month
monthly_profit = df.groupby('month_number')['total_profit'].sum()

# create a line plot of the monthly profit
plt.plot(monthly_profit.index, monthly_profit.values)
plt.xlabel('Month Number')
plt.ylabel('Total Profit')
plt.title('Total Profit by Month')
plt.show()

# Exercise 2: Get total profit of all months and show line plot with the following Style properties
# create a line plot of the monthly profit
plt.plot(monthly_profit.index, monthly_profit.values,'r--')
# add black points for each total profit value
plt.plot(monthly_profit.index, monthly_profit.values, 'ko')

plt.xlabel('Month Number')
plt.ylabel('Total Profit')
plt.title('Company Sales data of last year ')
plt.show()

# Exercise 3: Read all product sales data and show it using a multiline plot
# create a multiline plot of the product sales data

plt.plot(df['month_number'], df['facecream'], label='Face Cream')
plt.plot(df['month_number'], df['facecream'],'ko')
plt.plot(df['month_number'], df['facewash'], label='Face Wash')

plt.plot(df['month_number'], df['toothpaste'], label='Toothpaste')
plt.plot(df['month_number'], df['toothpaste'], 'ko')
plt.plot(df['month_number'], df['bathingsoap'], label='Bathing Soap')
plt.plot(df['month_number'], df['bathingsoap'], 'ko')
plt.plot(df['month_number'], df['shampoo'], label='Shampoo')
plt.plot(df['month_number'], df['shampoo'], 'ko')

plt.plot(df['month_number'], df['moisturizer'], label='Moisturizer')
plt.plot(df['month_number'], df['moisturizer'], 'ko')


plt.xlabel('Month Number')
plt.ylabel('Sales')
plt.title('Product Sales by Month')
plt.legend()
plt.show()

# Exercise 4: Read toothpaste sales data of each month and show it using a scatter plot
# create a scatter plot of toothpaste sales data
plt.scatter(df['month_number'], df['toothpaste'])

# add a grid to the plot
plt.grid(True, linestyle = '--')

plt.xlabel('Month Number')
plt.ylabel('Toothpaste Sales')
plt.title('Toothpaste Sales by Month')
plt.show()

# Exercise 5: Read face cream and facewash product sales data and show it using the bar chart
# create a figure and axis object
fig, ax = plt.subplots()

# create a bar chart of face cream and facewash sales data
width = 0.35
ax.bar(df['month_number'] - width/2, df['facecream'], width, color='blue', label='Face Cream')
ax.bar(df['month_number'] + width/2, df['facewash'], width, color='orange', label='Face Wash')

# add a dashed grid to the plot
ax.grid(True, linestyle='--')

ax.set_xlabel('Month Number')
ax.set_ylabel('Sales')
ax.set_title('Face Cream and Face Wash Sales by Month')
ax.legend()

plt.show()

# Exercise 6: Read sales data of bathing soap of all months and show it using a bar chart. Save this plot to your hard disk
# extract the sales data for bathing soap
bathingsoap_sales = df['bathingsoap']

# create a bar chart of bathing soap sales data
plt.bar(df['month_number'], bathingsoap_sales)
# add a dashed grid to the plot
plt.grid(True, linestyle='--')

plt.xlabel('Month Number')
plt.ylabel('Sales')
plt.title('Bathing Soap Sales by Month')

# save the plot to disk
plt.savefig('bathingsoap.png')

plt.show()

# Exercise 7: Read the total profit of each month and show it using the histogram to see the most common profit ranges
# extract the total profit for each month
profit_per_month = df['total_profit']

# create a histogram of the total profit data
plt.hist(profit_per_month, bins=10, color='blue')

plt.xlabel(' Profit range in dolar')
plt.ylabel('Actual profit in dolar')
plt.title('Profit Data')

# save the plot to disk
plt.savefig('/content/profit_data')

plt.show()

# Exercise 8: Calculate total sale data for last year for each product and show it using a Pie chart
# select the columns for the products
products = ['facecream', 'facewash', 'toothpaste', 'bathingsoap', 'shampoo', 'moisturizer']

# calculate the total sales for each product
total_sales = [df[product].sum() for product in products]

# create a pie chart of the total sales data
plt.pie(total_sales, labels=products, autopct='%1.1f%%', startangle=90)

plt.title('Sales Data')

# save the plot to disk
plt.savefig('/content/sales_data.png')

plt.show()

# Exercise 9: Read Bathing soap facewash of all months and display it using the Subplot

# extract the sales data for Bathing soap and facewash
bathingsoap_sales = df['bathingsoap']
facewash_sales = df['facewash']

# create a subplot of Bathing soap and facewash sales data
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))

# plot Bathing soap sales data in the first subplot
ax[0].plot(df['month_number'], df['bathingsoap'], 'bo-', linewidth=2, markersize=8, color = 'black')
ax[0].set_xlabel('Month Number')
ax[0].set_ylabel('Sales')
ax[0].set_title('Bathing Soap Sales by Month')

# plot facewash sales data in the second subplot
ax[1].plot(df['month_number'], df['facewash'], 'go-', linewidth=2, markersize=8, color = 'red')
ax[1].set_xlabel('Month Number')
ax[1].set_ylabel('Sales')
ax[1].set_title('Facewash Sales by Month')

# add a legend to the subplots
ax[0].legend(['Bathing soap'])
ax[1].legend(['Facewash'])

# adjust the layout of the subplots
plt.tight_layout()

# save the plot to disk
plt.savefig('/content/sales_data_bthsoap_and_facewash.png')

plt.show()

# Exercise 10: Read all product sales data and show it using the stack plot
# create a stack plot of all product sales data
fig, ax = plt.subplots(figsize=(10, 5))

# plot the stack plot
ax.stackplot(df['month_number'], df['facecream'], df['facewash'], df['toothpaste'], df['bathingsoap'], df['shampoo'], df['moisturizer'], labels=['Facecream', 'Facewash', 'Toothpaste', 'Bathingsoap', 'Shampoo', 'Moisturizer'])

# add labels and title to the plot
ax.set_xlabel('Month Number')
ax.set_ylabel('Sales')
ax.set_title('All Product Sales by Month')

# add a legend to the plot
ax.legend()

# save the plot to disk
plt.savefig('/content/data_sales_stackplot.png')

plt.show()

